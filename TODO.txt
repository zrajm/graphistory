-*- org -*-

archive = tag metadata as 'no longer open tab'
unarchive = restore a tab (and set metadata to 'open tab' state)

* ESSENTIAL
** TODO Move Elemental to separate repo
** TODO Redesign the table to look more Firefox-esque
   Use the more rounded font that Firefox uses to display its history (Ctrl+H),
   use a slightly grayer color. Darken <tr> background on hover.
** TODO Make it possible to navigate popup menu with keyboard
   Should be able to press... tab? arrow down? to enter the menu and navigate
   around, after selecting an entry, Enter should re-open, or go to that open
   tab.
** TODO Import (upload) a previously saved state
** TODO Show popup menu faster
   What can be done? Cache the DOM?
** TODO Save window (and its name) with each tab
   When closing a tab it should still be associated with the window it was in.
   Restoring windows should only restore the tabs that was open at the time of
   closing.

   Restoring a closed tab should (if possible?) insert the tab in its original
   place, in its original window.
** TODO Remember state of popup menu
   When re-opening the menu (Alt+L) any adjustments made to the table, and the
   previous search query should be kept.
** TODO Syncronize to server
** TODO Table hide/show columns
** TODO Table drag headers to move around
** TODO Hilite current tab
** TODO Unarchive tab
** TODO Handle when tab is restored by browser
   When a recently closed tab is restored by the browser (for example because
   the user pressed Ctrl-Shift-T), this should be handled gracefully. Ie the
   newly restored tab should be matched to its corresponding tabHistory, and
   that tabHistory should be unarchived, and given the tabId of the newly
   restored tab.
** TODO Handle when 'Back'/'Forward' used in browser
   How to do this? Can we use the 'lastAccessed' property of the 'tabs' object
   to determine whether a tab has been seen before?

   Injecting a 'popstate' listener using 'browser.tabs.executeScript' might
   work? Also note that we should be able to identify larger user jumps (that
   is, when user skips further back (or forward) than just the previous (or
   next) page.

   browser.tabs.executeScript({
     code: `
       let tabId = ${tabId}
       window.onpopstate = function (event) {
         console.log('HISTORY LOCATION: BAAACK!! ' + tabId + ' ' + window.location.href, event)
         //browser.storage.local.set({ '_': 'HISTORY LOCATION: ' + window.location.href })
       }
     `
   })
** TODO Increase browser.storage quota
** TODO Other visualization of history?
** TODO BUG: Something iffy with column resize
* NON-ESSENTIAL
** TODO Save favicons and show in the menu
** TODO Handle tab groups
   One should be able to name tab groups, and give them a color. In the GUI
   each tab should have the corresponding color.
** TODO Move tabs around in popup
   Tab should be draggable in GUI, and, when moved, should move the tabs in the
   corresponding way in the browser. When dragging a tab from archive into an
   existing window, it should be unarchived and instantiated in that window
   (when just clicking, it should be instantiated in the current window).
* DOCS
** Load/restart a Firefox plugin during development
   Go to `about:debugging`

   Here `Load Temporary Add-on...` can be used to load a plugin in development.
   (Select the `manifest.json` file.)

   Click the `Inspect` button to inspect the background process's DOM, source
   etc. (That's so weird, why does the *background process* have a DOM?)

   -------------------------------------------------------------------------
   I don't think logging for addons need to be enabled beyond that, but I'll
   keep the following here for now, just in case.

   To enable addon logging, do:

   + In `about:config`, add a new option `extensions.sdk.console.logLevel` and
     give it the value "all"

   + Restart Firefox

       in Firefox open the Browser Console:

   + `Tools > Web developer > Browser console` (NOTE: This is not the same as
     the usual Web Console used to debug web pages)

   You should see addons logs there now.

   Shortcut for browser console is Ctrl+Shift+J

   At the top of the 'Browser Console' window I had to change 'Browser Console
   Mode' from 'Parent process only' to 'Multiprocess'. There is no longer a
   "Show Content Messages" option. Not sure if this applies to all plugins -
   this was for a Sidebar plugin.
* FINISHED
** DONE Better name for this plugin 'Graphistory' -> 'Tabcryo'
   CLOSED: [2024-10-10 Thu 18:49]
   Also means renaming the Github repo, and moving the webpage, so now we can
   be found here:

       Github:  https://github.com/zrajm/tabcryo
       Webpage: https://zrajm.github.io/tabcryo/
       -
** DONE Allow showing of history in menu
   CLOSED: [2024-10-10 Thu 18:33]
   Kinda annoying. In order to have the <details> expanded when on the little
   'â–¸' arrow, but otherwise allow clicks to open a new tab (i.e. the click
   should not register if clicking anywhere else in the <summary>, only if
   clicking the little arrow), I had to do some CSS-fu.

   I disabled the 'summary::marker' pseudo-element (which normally contains the
   arrow) and replaced it with a 'summary:before' pseudo-element. This since I
   needed to use CSS 'pointer-events' function, which is not supported by
   '::marker' pseudo-events, but IS supported in ':before'. (Go figure!)

   I then set 'pointer-events: none' on the <summary> element, but
   'pointer-events: auto' on its :before element. This means that clicks on
   <summary> are not registered, UNLESS they are on the little arrow.

   Also added `is()` method to the Elemental module.
** DONE Rename module 'Elementary' -> 'Elemental'
   CLOSED: [2024-10-10 Thu 16:48]
** DONE Appearance of menu should show that links are clickable
   CLOSED: [2024-10-10 Thu 16:37]
   'cursor: pointer' + underlined text on hover
** DONE BUG: Fix clicking on tab in menu
   CLOSED: [2024-10-10 Thu 16:37]
   Stopped working. I inadvertently removed the 'tab' class used by tapOpen()
   (in popup.js).
** DONE Keybinding for opening the menu (Alt+L)
   CLOSED: [2024-10-10 Thu 04:22]
   Ended up choosing the keyboard shortcut Alt+L (to parallel Ctrl+L for
   selecting the address bar), after trying Ctrl+Shift+L and not getting it to
   work.
** DONE Made tablist searchable
   CLOSED: [2024-10-09 Wed 23:48]
** DONE Export (download) saved state
   CLOSED: [2024-10-09 Wed 19:26]
** DONE Table resizable columns
   CLOSED: [2024-10-09 Wed 12:29]
** DONE Share the 'Elementary' instance between background & popup
   CLOSED: [2024-10-09 Wed 00:51]
   So it doesn't have to be reloaded every time the popup is opened. (Or so
   that it can be reloaded faster?)
** DONE Table sortable
   CLOSED: [2024-10-04 Fri 18:51]
** DONE Cryptographically strong randomness in IDs
   CLOSED: [2022-01-27 Thu 17:33]
   Session IDs, note IDs etc. should all use cryptographic strength randomness
   to avoid collisions (since we don't want to do collision detection).

   Will use 22 base64 encoded characters, giving 132 bit entropy. This should be
   more than enough. 128 bits gives 0.000,000,000,000,000,001% risk of collision
   if there are 26 billion notes (according to table on Wikipedia) -- that
   sounds like a pretty acceptable number -- but we might as well round the
   number off upwards to the nearest base64 number that can be expressed without
   padding. This gets us 22 characters = 132 bit entropy.

   Well use `window.crypto` (or `window.msCrypto`) and fall back on
   `Math.random()` (the only non-stoneage browser to use `Math.random()` will be
   MSIE10, and possibly Safari on Android -- and the latter *might* actually
   have a cryptographically strong `Math.random()`!).

   As long as the number of clients with bad randomness are kept low it'll
   prolly not be a problem (is my guess).

* [eof]
