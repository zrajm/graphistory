-*- org -*-

archive = tag metadata as 'no longer open tab'
unarchive = restore a tab (and set metadata to 'open tab' state)

* ESSENTIAL
** TODO Cache the popup DOM tree
   It takes a long time to open the plugin popup. Can the DOM be cached so
   re-rendering doesn't take such a long time?
** TODO Save window (and its name) with each tab
   Tabs should be restoreable singly or a whole window at time.
** TODO Remember table structure for next invocation
** TODO Syncronize to server
** TODO Table hide/show columns
** TODO Table drag headers to move around
** TODO Hilite current tab
** TODO Unarchive tab
** TODO Handle when tab is restored by browser
   When a recently closed tab is restored by the browser (for example because
   the user pressed Ctrl-Shift-T), this should be handled gracefully. Ie the
   newly restored tab should be matched to its corresponding tabHistory, and
   that tabHistory should be unarchived, and given the tabId of the newly
   restored tab.
** TODO Handle when 'Back'/'Forward' used in browser
   How to do this? Can we use the 'lastAccessed' property of the 'tabs' object
   to determine whether a tab has been seen before?

   Injecting a 'popstate' listener using 'browser.tabs.executeScript' might
   work? Also note that we should be able to identify larger user jumps (that
   is, when user skips further back (or forward) than just the previous (or
   next) page.

   browser.tabs.executeScript({
     code: `
       let tabId = ${tabId}
       window.onpopstate = function (event) {
         console.log('HISTORY LOCATION: BAAACK!! ' + tabId + ' ' + window.location.href, event)
         //browser.storage.local.set({ '_': 'HISTORY LOCATION: ' + window.location.href })
       }
     `
   })
** TODO Increase browser.storage quota
** TODO Other visualization of history?
** TODO BUG: Something iffy with column resize
* NON-ESSENTIAL
** TODO Favicons
** TODO Handle tab groups
   One should be able to name tab groups, and give them a color. In the GUI
   each tab should have the corresponding color.
** TODO Move tabs around in popup
   Tab should be draggable in GUI, and, when moved, should move the tabs in the
   corresponding way in the browser. When dragging a tab from archive into an
   existing window, it should be unarchived and instantiated in that window
   (when just clicking, it should be instantiated in the current window).
* DOCS
** Load/restart a Firefox plugin during development
   Go to `about:debugging`

   Here `Load Temporary Add-on...` can be used to load a plugin in development.
   (Select the `manifest.json` file.)

   Click the `Inspect` button to inspect the background process's DOM, source
   etc. (That's so weird, why does the *background process* have a DOM?)

   -------------------------------------------------------------------------
   I don't think logging for addons need to be enabled beyond that, but I'll
   keep the following here for now, just in case.

   To enable addon logging, do:

   + In `about:config`, add a new option `extensions.sdk.console.logLevel` and
     give it the value "all"

   + Restart Firefox

       in Firefox open the Browser Console:

   + `Tools > Web developer > Browser console` (NOTE: This is not the same as
     the usual Web Console used to debug web pages)

   You should see addons logs there now.

   Shortcut for browser console is Ctrl+Shift+J

   At the top of the 'Browser Console' window I had to change 'Browser Console
   Mode' from 'Parent process only' to 'Multiprocess'. There is no longer a
   "Show Content Messages" option. Not sure if this applies to all plugins -
   this was for a Sidebar plugin.
* FINISHED
** DONE Export (download) saved state
   CLOSED: [2024-10-09 Wed 19:26]
** DONE Table resizable columns
   CLOSED: [2024-10-09 Wed 12:29]
** DONE Share the 'Elementary' instance between background & popup
   CLOSED: [2024-10-09 Wed 00:51]
   So it doesn't have to be reloaded every time the popup is opened. (Or so
   that it can be reloaded faster?)
** DONE Table sortable
   CLOSED: [2024-10-04 Fri 18:51]
** DONE Cryptographically strong randomness in IDs
   CLOSED: [2022-01-27 Thu 17:33]
   Session IDs, note IDs etc. should all use cryptographic strength randomness
   to avoid collisions (since we don't want to do collision detection).

   Will use 22 base64 encoded characters, giving 132 bit entropy. This should be
   more than enough. 128 bits gives 0.000,000,000,000,000,001% risk of collision
   if there are 26 billion notes (according to table on Wikipedia) -- that
   sounds like a pretty acceptable number -- but we might as well round the
   number off upwards to the nearest base64 number that can be expressed without
   padding. This gets us 22 characters = 132 bit entropy.

   Well use `window.crypto` (or `window.msCrypto`) and fall back on
   `Math.random()` (the only non-stoneage browser to use `Math.random()` will be
   MSIE10, and possibly Safari on Android -- and the latter *might* actually
   have a cryptographically strong `Math.random()`!).

   As long as the number of clients with bad randomness are kept low it'll
   prolly not be a problem (is my guess).

* [eof]
